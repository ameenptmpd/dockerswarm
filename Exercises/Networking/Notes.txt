Overlay networks
----------------

The overlay network driver 
	creates a distributed network among multiple Docker daemon hosts. 
	This network sits on top of (overlays) the 
		host-specific networks, 
		allowing containers connected to it (including swarm service containers) 
		to communicate securely when encryption is enabled. 
	Docker transparently handles routing of each packet 
		to and from the correct Docker daemon host and 
		the correct destination container.

When you initialize a swarm or join a Docker host to an existing swarm, 
	two new networks are created on that Docker host:

	ingress
		an overlay network  
		handles control and data traffic related to swarm services. 
		Default network for swarm service 
			(if we don't connect it to a user-defined overlay network)
	docker_gwbridge
		bridge network
		Connects individual Docker daemon to the other daemons participating in the swarm.

	We can create user-defined overlay networks using 
		docker network create, 
	Services or containers can be connected to more than one network at a time. 
	

	We can connect both swarm services and standalone containers to an overlay network, 
	Default behaviors and configuration concerns are different between
		standalone containers
		services
	

-----------------------------------------------------
Pre-req.
Firewall rules for Docker daemons using overlay networks

You need the following ports open to traffic to and from each Docker host participating on an overlay network:

TCP port 2377 for cluster management communications
TCP and UDP port 7946 for communication among nodes
UDP port 4789 for overlay network traffic
Before you can create an overlay network, you need to either initialize your Docker daemon as a swarm manager using docker swarm init or join it to an existing swarm using docker swarm join. Either of these creates the default ingress overlay network which is used by swarm services by default. You need to do this even if you never plan to use swarm services. Afterward, you can create additional user-defined overlay networks.
-----------------------------------------------------

To create an overlay network for use with swarm services, use a command like the following:

	$ docker network create -d overlay my-overlay


N.B:
	To create an overlay network 
		which can be used by swarm services 
		or standalone containers to communicate with other standalone containers running on other Docker daemons, 
		add the --attachable flag:
		
		So if you create an overlay network without --attachable, then containers will not able to connect.

	$ docker network create -d overlay --attachable my-attachable-overlay

docker service create --name my-nginx --publish published=81,target=80 --replicas=1 --network my-attachable-overlay nginx

Additionally we can specify the 
	IP address range, 
	subnet, 
	gateway etc. 
	
	docker network create --help 
	
	
Encrypt traffic on an overlay network
-------------------------------------
All swarm service management traffic is encrypted by default
	(using the AES algorithm in GCM mode). 
	Manager nodes in the swarm rotate the key used to encrypt gossip data every 12 hours.

To encrypt application data as well, 
	add --opt encrypted when creating the overlay network. 
	This enables IPSEC encryption at the level of the vxlan. 
	This encryption imposes a non-negligible performance penalty, 
	so test this option before using it in production.

When you enable overlay encryption, 
	Docker creates IPSEC tunnels between all the nodes 
		where tasks are scheduled for services attached to the overlay network. 
	These tunnels also use AES algorithm in GCM mode and 
		manager nodes automatically rotate the keys every 12 hours.

-------------------------------------------------------------------------------------------
Overlay network encryption is not supported on Windows. If a Windows node attempts to connect to an encrypted overlay network, no error is detected but the node cannot communicate.
-------------------------------------------------------------------------------------------

SWARM MODE OVERLAY NETWORKS AND STANDALONE CONTAINERS
-----------------------------------------------------
You can use the overlay network feature with both --opt encrypted --attachable and attach unmanaged containers to that network:

	$ docker network create --opt encrypted --driver overlay --attachable my-attachable-multi-host-network
	
	
	docker network create --driver=overlay --attachable core-infra #core-infra - name
	docker network ls
	docker service create --publish 80:80 --network=core-infra --name nginx nginx 
	docker run --network=core-infra -it alpine:latest sh
	docker network inspect core-infra

Customize the default ingress network
-------------------------------------
Most users never need to configure the ingress network, 
	but Docker allows you to do so. 
	Use it if automatically-chosen subnet conflicts 
		with one that already exists on your network
	or 
		you need to customize other low-level network settings.

Customizing the ingress network 
	remove and recreate it. 
Usually done before you create any services in the swarm. 
If you have existing services which publish ports
	remove those before you can remove the ingress network.

If no ingress network exists, 
	existing services which do not publish ports continue to function 
	but are not load-balanced. 
	Services which publish ports can't be reached from outside the network.

Inspect the ingress network using 
	docker network inspect ingress

Remove any services whose containers are connected to it. 
These are services that publish ports, 
	e.g. WordPress service : publishes port 80 can be connected. 
	If all such services are not stopped, the next step fails.

Remove the existing ingress network:

$ docker network rm ingress

WARNING! Before removing the routing-mesh network, make sure all the nodes
in your swarm run the same docker engine version. Otherwise, removal may not
be effective and functionality of newly created ingress networks will be
impaired.
Are you sure you want to continue? [y/N]

Create a new overlay network using the --ingress flag, along with the custom options you want to set. This example sets the MTU to 1200, sets the subnet to 10.11.0.0/16, and sets the gateway to 10.11.0.2.

$ docker network create \
  --driver overlay \
  --ingress \
  --subnet=10.11.0.0/16 \
  --gateway=10.11.0.2 \
  --opt com.docker.network.driver.mtu=1200 \
  my-ingress

Note: You can name your ingress network something other than ingress, but you can only have one ingress network. 
An attempt to create a second one fails.
In networking, 
	maximum transmission unit (MTU) 
		measurement representing the largest data packet that a network-connected device will accept. 

Restart the services that you stopped in the first step.

Customize the docker_gwbridge interface
	The docker_gwbridge is a virtual bridge 
		that connects the overlay networks (including the ingress network) 
		to an individual Docker daemonâ€™s physical network. 
	Docker creates it automatically when you 
		initialize a swarm or 
		join a Docker host to a swarm, 
		but it is not a Docker device. 
	It exists in the kernel of the Docker host. 
	If you need to customize its settings, 
		do so before joining the Docker host to the swarm, or 
		after temporarily removing the host from the swarm.

Stop Docker.

Delete the existing docker_gwbridge interface.

	$ sudo ip link set docker_gwbridge down

	$ sudo ip link del dev docker_gwbridge
	Start Docker. Do not join or initialize the swarm.

Create or re-create the docker_gwbridge bridge manually with your custom settings, using the docker network create command. This example uses the subnet 10.11.0.0/16. For a full list of customizable options, see Bridge driver options.

	$ docker network create \
	--subnet 10.11.0.0/16 \
	--opt com.docker.network.bridge.name=docker_gwbridge \
	--opt com.docker.network.bridge.enable_icc=false \
	--opt com.docker.network.bridge.enable_ip_masquerade=true \
	docker_gwbridge


Refer: https://dumlutimuralp.medium.com/docker-networking-intro-62d4bc163843 for more details	
	
Initialize or join the swarm. Since the bridge already exists, Docker does not create it with automatic settings.

Operations for swarm services
Publish ports on an overlay network
Swarm services connected to the same overlay network effectively expose all ports to each other. For a port to be accessible outside of the service, that port must be published using the -p or --publish flag on docker service create or docker service update. Both the legacy colon-separated syntax and the newer comma-separated value syntax are supported. The longer syntax is preferred because it is somewhat self-documenting.
