
Create 2/3 instances like and install docker in it.
	Install Docker 

		$ curl -fsSL https://get.docker.com -o get-docker.sh
		$ sudo sh get-docker.sh
		sudo su
		sudo usermod -aG docker your-user
		systemctl start docker
		systemctl enable docker 
		systemctl status docker

---------------------------------------------------------
Following ports needs to be open.
	Open protocols and ports between the hosts
	The following ports must be available. On some systems, these ports are open by default.

	TCP port 2377 for cluster management communications
	TCP and UDP port 7946 for communication among nodes
	UDP port 4789 for overlay network traffic
	If you plan on creating an overlay network with encryption (--opt encrypted), you also need to ensure ip protocol 50 (ESP) traffic is allowed.
-----------------------------------------------------------------

1. docker swarm init --advertise-addr <server ip>
	e.g. docker swarm init --advertise-addr 192.168.253.13
	
	on aws 
		docker swarm init 
	is good.
		
		docker swarm join --token SWMTKN-1-3tcroz42ihzwl4r440itpw9rysew1r86f27hacz9un3k617twh-5u9lkmcuf8e5ase4px26nhoe6 192.168.253.25:2377

	To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


2. docker node ls
	docker info #on manager


3. Add worker nodes 
	docker swarm join --token .....
	
4. Add manager nodes
	
	docker swarm init - gives reference of how to generate the manager token

	
	docker swarm join-token manager

		Returns something like
		docker swarm join --token SWMTKN-1-3tcroz42ihzwl4r440itpw9rysew1r86f27hacz9un3k617twh-6ys582ayzlbmpk45p18y8x2um 192.168.253.25:2377
	
Execute the following on the master node.	
5. Create a service.
	docker service create -p 80:80 --name webserver nginx
	
	docker service ls
--------------------------------------------------------------
When a service is deployed/created to the swarm, 
	Swarm manager accepts the service definition as the desired state for the service. 
	Schedules the service on nodes 
	Creates one or more replica tasks. 
	Once the service is deployed, 
		these tasks runs independently on all nodes. 
		Each task will create an independent container in all nodes in the swarm.

In the above example, 
	a docker service with nginx image is created on all the swarm nodes with 2 replicas.

The command 
	‘docker service create --replicas 2 --name ubuntu_test ubuntu bash’
	'docker service create -p 80:80 --name webserver nginx'

docker service create : 
	used to create a docker service in the swarm
--replicas 2 : 
	will direct the docker engine to keep 2 replicas in the node machines
--name : 
	flag used to instruct the name that is to be given to the service
ubuntu_test : 
	the name given to the service followed by name flag
ubuntu : the name of the docker image that is to be used (eg: centos, nginx, php etc.).
bash : the command we wish to run in the container.

Issuing docker ps -a on the host machine will display all the services started in the host machine.

--------------------------------------------------------------





6. docker service ps webserver
	Will show the list of tasks (These are not containers)
	The first (ID) field there is Task ID and different from service id or container id.
	
	list service
	docker service ls
	
	docker inspect <service id>
	Shows the details of the task.

	If your container was created with port mapping (-p 80:80), then your container would be a part of subnet and gateway. 
	It would by default connect to the overlay network.
	

7. Create multiple instance of a service
	docker service create --replicas 5 --name web nginx
	-p may fail unless you have 5 nodes to run containers
	
8. Scale out/in a service
	docker service scale webserver=2 (do this based on how many nodes you have)



9. Remove service
	remove webserver
	docker service rm webserver
	
	remove web
	docker service rm web
	
10. Docker node can leave the cluster 
		docker swarm leave --force #On the node which has to be removed.
		docker node ls
			status : Down
		docker node rm <node id> #Node id can be got from docker node ls command.
